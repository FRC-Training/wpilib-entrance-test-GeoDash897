
import java.util.ArrayList;
import java.util.Collections;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author GeoSonicDash
 */

public class WLIPEnTest {
    private static ArrayList <Student> studentList = new ArrayList <Student>();
    public static void main(String [] args) {//Code for the test
        addStudent();
        getAlphabetical(0);
        getMiddleSchoolers();
        getAlphabetical(1);
        getAlphabetical(2);
        getStudentSpecific(0);
        getStudentSpecific(1);
        getStudentSpecific(2);
        getStudentSpecific(3);
        getAverageGrade(0);
        getAverageGrade(1);
        getAverageGrade(2);
        getAverageGrade(3);
    }
    public static void addStudent() {//creates list of students
        studentList.add(new Student("Josh Moshe",11,2019,"Precalc-5","Goldman","High",70));
        studentList.add(new Student("Josh Moshe",11,2019,"US History-4","Cullen","High",98));
        studentList.add(new Student("Kelly Smith",6,2016,"Science-3","Doe","Middle",81));
        studentList.add(new Student("Mark Levine",4,2008,"4th Grade","Smith","Elementary",100));
        studentList.add(new Student("George Pop",12,2018,"Precalc-4","Goldman","High",65));
        studentList.add(new Student("George Pop",11,2017,"US History-4","Cullen","High",77));
        studentList.add(new Student("George Pop",4,2008,"4th Grade","Smith","Elementary",75));
        studentList.add(new Student("Heather Wilson",7,2016,"Science-2","Doe","Middle",99));
        studentList.add(new Student("Heather Wilson",0,2010,"Kindergarden","Smith","Elementary",89));
        studentList.add(new Student("Tom Brokaw",11,2019,"Precalc-5","Liasi","High",90));
        studentList.add(new Student("Isabelle Frank",10,2018,"Precalc-4","Goldman","High",83));
        studentList.add(new Student("Isabelle Frank",9,2017,"Alegbra-7","Goldman","High",95));
        studentList.add(new Student("Isabelle Frank",4,2012,"4th Grade","Smith","Elementary",100));
    }   
    public static void getAlphabetical(int option) {
        ArrayList <String> list = new ArrayList <String>();  
        for(int i = 0;i < studentList.size();i++) {
            String temp = "Memes";
            String temp2 = "Memes";
            //Gets specific info. from the Student object depending on the task
            if(option == 0) {
                temp = studentList.get(i).returnTeacher();
                temp2 = studentList.get(i).returnSchool();
            }
            else if(option == 1) {
                temp = studentList.get(i).returnClassName();
                temp2 = studentList.get(i).returnSchool();
            }
            else if(option == 2) {
                temp = studentList.get(i).returnClassName();
            }
            if(option < 2) {//if list is empty and temp2 is equal to the thing we want, add the temp to the list
                //I do this because the list needs to have something in it before I check for duplicates
                //-can't check something that doesn't exist
                if(list.isEmpty() && temp2.equals("High")) {
                    list.add(temp);
                }
                else if(list.size() > 0 && temp2.equals("High")) {//checks for duplicates
                    int checkForRepeat = 0;
                    for(int j = 0; j < list.size();j++) {//goes through the list
                        if(temp.equals(list.get(j))) {
                            checkForRepeat = 1;
                        }
                    }
                    if(checkForRepeat == 0) {//If there are no duplicates add to list
                        list.add(temp);
                    }
                }
            }
            else if(option == 2) {
                if((list.isEmpty() && temp.equals("Precalc-4")) || (list.isEmpty() && temp.equals("Precalc-5"))) {
                    list.add(temp);
                }
                else if((list.size() > 0 && temp.equals("Precalc-4")) || (list.size() > 0 && temp.equals("Precalc-5"))) {
                    int checkForRepeat = 0;
                    for(int j = 0; j < list.size();j++) {//checks for duplicates
                        if(temp.equals(list.get(j))) {//goes through the list
                            checkForRepeat = 1;
                        }
                    }
                    if(checkForRepeat == 0) {//If there are no duplicates add to list
                        list.add(temp);
                    }
                }
            }
        }
        //Prints out according information
        if(option == 0) {
            System.out.println("High School Teachers:");            
        }
        else if(option == 1) {
            System.out.println("");
            System.out.println("High School Departments:"); 
        }
        else if(option == 2) {
            System.out.println("");
            System.out.println("Math Departments:"); 
        }
        for(int i = 0; i < list.size();i++) {
            Collections.sort(list, String.CASE_INSENSITIVE_ORDER);
            System.out.println(""+list.get(i));
        }
    }
    public static void getMiddleSchoolers() {
        ArrayList <Student> middleList = new ArrayList <Student>();
        for(int i = 0;i < studentList.size();i++) {
            Student tempStudent = studentList.get(i); //creates temp Student
            String tempName = tempStudent.returnName(); //get name
            String school = tempStudent.returnSchool(); //get school
            if(middleList.isEmpty() && school.equals("Middle")) { //adds new Student object to middleList if the
                //student goes to middle school
                middleList.add(new Student(tempStudent.returnName(),tempStudent.returnYear(),tempStudent.returnDate()
                ,tempStudent.returnClassName(),tempStudent.returnTeacher(),tempStudent.returnSchool(),
                tempStudent.returnGrade()));               
            }
            else if(middleList.size() > 0 && school.equals("Middle")) {//checks for duplicates
                int checkForRepeat = 0;
                for(int j = 0; j < middleList.size();j++) {//goes through middleList
                    if(tempName.equals(middleList.get(j).returnName())) {
                        checkForRepeat = 1;
                    }
                }
                if(checkForRepeat == 0) {//adds new Student object to middleList if there is none
                    middleList.add(new Student(tempStudent.returnName(),tempStudent.returnYear(),tempStudent.returnDate()
                    ,tempStudent.returnClassName(),tempStudent.returnTeacher(),tempStudent.returnSchool(),
                    tempStudent.returnGrade())); 
                }
            }
        }
        System.out.println("");
        System.out.println("Middle Schoolers:");
        for(int i = 0; i < middleList.size();i++) {
            Collections.sort(middleList, Student.studentDateComparator); //sorts middleList by Student's date
            System.out.println(""+middleList.get(i).returnName()); //prints list
        }
    }
    public static void getStudentSpecific(int option) {
        ArrayList <Student> list = new ArrayList <Student>();
        String getName = "Memes";
        if(option == 0) {
            getName = "Josh Moshe";
        }
        else if(option > 0) {
            getName = "Heather Wilson";
        }
        for(int i = 0; i < studentList.size();i++) {
            Student tempStudent = studentList.get(i);
            String studentName = tempStudent.returnName();//get student's name
            String className = tempStudent.returnClassName();//get student's class
            String getSchool = tempStudent.returnSchool();//get student's school
            String getTeacher = tempStudent.returnTeacher();//get student's teacher
            if(option == 0 || option == 1) {
                if(studentName.equals(getName)) {//adds to list if the Student object has specific name
                    list.add(new Student(tempStudent.returnName(),tempStudent.returnYear(),tempStudent.returnDate()
                    ,tempStudent.returnClassName(),tempStudent.returnTeacher(),tempStudent.returnSchool(),
                    tempStudent.returnGrade()));               
                }    
            }
            else if(option == 2) {
                if(studentName.equals(getName) && getSchool.equals("Elementary")) {//adds to list 
                    //if the Student object has specific name and school
                    list.add(new Student(tempStudent.returnName(),tempStudent.returnYear(),tempStudent.returnDate()
                    ,tempStudent.returnClassName(),tempStudent.returnTeacher(),tempStudent.returnSchool(),
                    tempStudent.returnGrade()));               
                }    
            }  
            else if(option == 3) {
                if(list.isEmpty() && getTeacher.equals("Goldman")) {//adds to list if student has Goldman as a teacher
                    //-fills the list with at least one object (so I can check for dups. later
                    list.add(new Student(tempStudent.returnName(),tempStudent.returnYear(),tempStudent.returnDate()
                    ,tempStudent.returnClassName(),tempStudent.returnTeacher(),tempStudent.returnSchool(),
                    tempStudent.returnGrade()));               
                }
                else if(list.size() > 0 && getTeacher.equals("Goldman")) {//check for duplicates
                    int checkForRepeat = 0;
                    for(int j = 0; j < list.size();j++) {//goes through list
                        if(className.equals(list.get(j).returnClassName())) {//checks to see if there is no class name repeats
                            //since Goldman has multiple students that have the same class together
                            checkForRepeat = 1;
                        }
                    }
                    if(checkForRepeat == 0) {//no duplicate = add to list
                        list.add(new Student(tempStudent.returnName(),tempStudent.returnYear(),tempStudent.returnDate()
                        ,tempStudent.returnClassName(),tempStudent.returnTeacher(),tempStudent.returnSchool(),
                        tempStudent.returnGrade())); 
                    }
                }    
            }   
        }
        if(option == 0) {
            Collections.sort(list,Student.studentClassNameComparator); //sorts Students in list by class name
            System.out.println("");
            System.out.println("Josh Moshe's grades:");
            for(int i = 0; i < list.size();i++) {
                System.out.println(""+list.get(i).returnClassName()+":"); 
                System.out.println(""+list.get(i).returnGrade()); 
            }    
        }   
        else if(option == 1) {
            Collections.sort(list,Student.studentYearComparator); //sorts Students in list by year
            System.out.println("");
            System.out.println("Heather Wilson's classes:");
            for(int i = 0; i < list.size();i++) {
                System.out.println(""+list.get(i).returnClassName()+":");
                System.out.println(""+list.get(i).returnGrade());
                System.out.println(""+list.get(i).returnYear());
                System.out.println(""+list.get(i).returnDate());
            }    
        }
        else if(option == 2) {
            Collections.sort(list,Student.studentYearComparator); //sorts Students in list by year
            System.out.println("");
            System.out.println("Heather Wilson's Elementary Classes:");
            for(int i = 0; i < list.size();i++) {
                System.out.println(""+list.get(i).returnClassName());
            }    
        }
        else if(option == 3) {
            Collections.sort(list,Student.studentClassNameComparator); //sorts Students in list by class name
            System.out.println("");
            System.out.println("Goldman's classes:");
            for(int i = 0; i < list.size();i++) {
                System.out.println(""+list.get(i).returnClassName());
            }    
        }
    }
    public static void getAverageGrade(int option) {//for averages and class grades        
        System.out.println("");
        double sum = 0;
        int numberOfStudent = 0;
        int checkForHighestNum = 0;
        for(int i = 0; i < studentList.size();i++) {
            Student temp = studentList.get(i);
            if(option == 0) {
                if(temp.returnYear() == 4 && temp.returnDate() == 2008) {//adds grade to sum if student was in 4th grade in 2008
                    sum+= temp.returnGrade();
                    numberOfStudent++;
                }
            }
            else if(option == 1){
                if((temp.returnClassName().equals("Precalc-4")) || (temp.returnClassName().equals("Precalc-5"))) {
                    //if student was in Precalc - sets their grade as temp, if temp is greater than checkForHighestNum, 
                    //it sets that as the checkForHighestNum
                    int tempGrade = temp.returnGrade();
                    if(tempGrade > checkForHighestNum) {
                        checkForHighestNum = tempGrade;
                    }
                }
            }
            else if(option == 2) {
                if((temp.returnClassName().equals("Precalc-4") && temp.returnDate() == 2019) || 
                (temp.returnClassName().equals("Precalc-5") && temp.returnDate() == 2019)) {
                    //adds grade to sum if student was in Precalc in 2019
                    //adds student to number (to get average)
                    sum+= temp.returnGrade();
                    numberOfStudent++;
                }
            }
            else if(option == 3) {
                if((temp.returnClassName().equals("Precalc-4") && temp.returnTeacher().equals("Goldman")) || 
                (temp.returnClassName().equals("Precalc-5") && temp.returnTeacher().equals("Goldman"))) {
                    //if student was in Precalc + Goldman- sets their grade as temp, if temp is greater than checkForHighestNum, 
                    //it sets that as the checkForHighestNum
                    sum+= temp.returnGrade();
                    numberOfStudent++;
                }
            }
        }
        //Gets and prints averages
        if(option == 0) {
            double average = sum/numberOfStudent;
            System.out.println("Average of 4th Graders's Grades (2008):");
            System.out.println(""+average);
        }
        else if(option == 1) {
            System.out.println("Highest Precalc Grade:");
            System.out.println(""+checkForHighestNum);
        }
        else if(option == 2) {
            double average = sum/numberOfStudent;
            System.out.println("Average of Precalc Grades in 2019:");
            System.out.println(""+average);
        }
        else if(option == 3) {
            double average = sum/numberOfStudent;
            System.out.println("Average of Goldman's Precalc Grades:");
            System.out.println(""+average);
        }
    }
}
